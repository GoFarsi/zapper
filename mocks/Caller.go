// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Caller is an autogenerated mock type for the Caller type
type Caller struct {
	mock.Mock
}

// DPanic provides a mock function with given fields: _a0
func (_m *Caller) DPanic(_a0 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	_m.Called(_ca...)
}

// DPanicF provides a mock function with given fields: _a0, _a1
func (_m *Caller) DPanicF(_a0 string, _a1 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	_m.Called(_ca...)
}

// DPanicW provides a mock function with given fields: _a0, _a1
func (_m *Caller) DPanicW(_a0 string, _a1 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	_m.Called(_ca...)
}

// Debug provides a mock function with given fields: _a0
func (_m *Caller) Debug(_a0 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	_m.Called(_ca...)
}

// DebugF provides a mock function with given fields: _a0, _a1
func (_m *Caller) DebugF(_a0 string, _a1 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	_m.Called(_ca...)
}

// DebugW provides a mock function with given fields: _a0, _a1
func (_m *Caller) DebugW(_a0 string, _a1 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	_m.Called(_ca...)
}

// Error provides a mock function with given fields: _a0
func (_m *Caller) Error(_a0 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	_m.Called(_ca...)
}

// ErrorF provides a mock function with given fields: _a0, _a1
func (_m *Caller) ErrorF(_a0 string, _a1 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	_m.Called(_ca...)
}

// ErrorW provides a mock function with given fields: _a0, _a1
func (_m *Caller) ErrorW(_a0 string, _a1 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	_m.Called(_ca...)
}

// Fatal provides a mock function with given fields: _a0
func (_m *Caller) Fatal(_a0 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	_m.Called(_ca...)
}

// FatalF provides a mock function with given fields: _a0, _a1
func (_m *Caller) FatalF(_a0 string, _a1 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	_m.Called(_ca...)
}

// FatalW provides a mock function with given fields: _a0, _a1
func (_m *Caller) FatalW(_a0 string, _a1 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	_m.Called(_ca...)
}

// Info provides a mock function with given fields: _a0
func (_m *Caller) Info(_a0 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	_m.Called(_ca...)
}

// InfoF provides a mock function with given fields: _a0, _a1
func (_m *Caller) InfoF(_a0 string, _a1 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	_m.Called(_ca...)
}

// InfoW provides a mock function with given fields: _a0, _a1
func (_m *Caller) InfoW(_a0 string, _a1 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	_m.Called(_ca...)
}

// Panic provides a mock function with given fields: _a0
func (_m *Caller) Panic(_a0 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	_m.Called(_ca...)
}

// PanicF provides a mock function with given fields: _a0, _a1
func (_m *Caller) PanicF(_a0 string, _a1 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	_m.Called(_ca...)
}

// PanicW provides a mock function with given fields: _a0, _a1
func (_m *Caller) PanicW(_a0 string, _a1 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	_m.Called(_ca...)
}

// Warn provides a mock function with given fields: _a0
func (_m *Caller) Warn(_a0 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	_m.Called(_ca...)
}

// WarnF provides a mock function with given fields: _a0, _a1
func (_m *Caller) WarnF(_a0 string, _a1 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	_m.Called(_ca...)
}

// WarnW provides a mock function with given fields: _a0, _a1
func (_m *Caller) WarnW(_a0 string, _a1 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	_m.Called(_ca...)
}

type mockConstructorTestingTNewCaller interface {
	mock.TestingT
	Cleanup(func())
}

// NewCaller creates a new instance of Caller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCaller(t mockConstructorTestingTNewCaller) *Caller {
	mock := &Caller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
